/*
#include "json.hpp"
// for convenience
using json = nlohmann::json;
*/

/**
 * Web / Server.cpp
 */

#include <iostream>
#include <boost/format.hpp>
#include <sstream>
#include "server.hpp"

namespace Web
{
  Server::Server(
		 Socket* socket
		 )
    : mq_(MAX_QUEUE_SIZE),
      ws_(nullptr),
      socket_(socket)
  {
    std::cout << "Web::Server:\t Initializing..." << std::endl;

    int port = 9000;

    // On user connection
    socket_->hub_.onConnection([this](
				      uWS::WebSocket<uWS::SERVER> *ws
				      ));

    // On user disconnection
    socket_->hub_.onDisconnection([](
				     uWS::WebSocket<uWS::SERVER> *ws,
				     int code,
				     std::string *message,
				     size_t length
				     ));

    // On message received
    socket_->hub_.onMessage([this](
				   uWS::WebSocket<uWS::SERVER> *ws,
				   std::string* message,
				   size_t length,
				   uWS::OpCode opCode
				   ) {
			      std::string data = std::string(message, length);

			      std::cout << "web::Server:\t Data received: " << data << std::endl;

			    });

        
    if (!socket_->hub_.listen(port)) {
      std::cout << "web::Server:\t Error starting on port '" << port << "'." << std::endl;
      socket_->hubStatus_ = socket_->UWS_STATUS_ERROR;
    }

    std::cout << "web::Server:\t Connection is running on port '" << port << "'" << std::endl;
    std::cout << "web::Server:\t External ip '" << "https://10.9.8.2/" << "'" << std::endl;
  }

  void Server::handleMsg(unsigned long id, osapi::Message* msg)
  {
    switch (id) {
      // preset plant type cases
    case ID_PLANT_1:
      {
				

	break;
      }
    case ID_PLANT_2:
      {
            

	break;
      }
    case ID_PLANT_3:
      {
            

	break;
      }
      // Set temp
    case ID_SET_TEMP:
      {
				
	break;
      }
      // set Humi
    case ID_SET_HUMI:
      {
            

	break;
      }
      // update current temp
    case ID_CURRENT_TEMP:
      {
				

	break;
      }
      // update current humi
    case ID_CURRENT_HUMI:
      {
				
	break;
      }

    default:
      break;
    }
  }

  void Server::run()
  {
    while (1) {
      // Message ID
      unsigned long id;

      // Receive the message from the queue and handle it
      osapi::Message* msg = mq_.receive(id);
      handleMsg(id, msg);

      // Remove message pointer to prevent memory loss
      delete msg;
    }
  }


}
